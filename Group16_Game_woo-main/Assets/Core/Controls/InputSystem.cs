//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Core/Controls/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""Boat Controls"",
            ""id"": ""236e9464-55dc-4d1c-a64c-d0128cb9447c"",
            ""actions"": [
                {
                    ""name"": ""ForwardInput"",
                    ""type"": ""Button"",
                    ""id"": ""abff88a0-de5d-41f7-a9a9-f9f108b88a69"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TurnInput"",
                    ""type"": ""Button"",
                    ""id"": ""a1eebc4e-43f5-49a6-9955-f09a8eb1d822"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraInput"",
                    ""type"": ""Button"",
                    ""id"": ""79003a2b-f172-44e3-9fa3-774dd8d5b541"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShootRight"",
                    ""type"": ""Button"",
                    ""id"": ""fcb9b4aa-720b-4db2-ad20-1d74c11a84f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShootLeft"",
                    ""type"": ""Button"",
                    ""id"": ""5d22eeed-d319-437c-ad62-804c06a0dc6b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""wasd input"",
                    ""id"": ""66d22ab1-1a08-490a-a2d8-1c464d06e609"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardInput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e100d9b6-bc93-4139-900f-c9d818419a2a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2f3ce1d8-af54-4cec-aa5e-266c116357cc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""arrowkey input"",
                    ""id"": ""67498e07-d1be-4235-b29e-bbbe3f0c1df8"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardInput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""475c93d0-870a-4314-bf85-76dec440e820"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""de1ace44-b4cb-4e31-a12a-3116cfa5edba"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""wasd input"",
                    ""id"": ""768e06b6-7dd8-4d24-853a-00e6d2487214"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnInput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""55805fac-bceb-4c34-8f29-25e58b8052b3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""bfc7c85b-76c0-4b6f-b6a2-29f9539a859c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""arrowkey input"",
                    ""id"": ""0a7b2b02-0043-45da-a803-712dc1d919e4"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnInput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""f7001049-d233-471b-90e8-522fd5ca69cd"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""839ceeae-afcb-48ca-bd87-ee4be228b632"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""c6e4e741-4e20-406b-af91-bd4d6206510c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraInput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""382e6b9b-309f-45e9-8e89-d8cab4acb702"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b6914af0-287f-4fcc-8d17-4a1d4a4c54ad"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""22970c18-2598-411d-a143-0508bb152ec5"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""059f7026-721d-4a8c-b6f4-38b0c8c52d33"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Boat Controls
        m_BoatControls = asset.FindActionMap("Boat Controls", throwIfNotFound: true);
        m_BoatControls_ForwardInput = m_BoatControls.FindAction("ForwardInput", throwIfNotFound: true);
        m_BoatControls_TurnInput = m_BoatControls.FindAction("TurnInput", throwIfNotFound: true);
        m_BoatControls_CameraInput = m_BoatControls.FindAction("CameraInput", throwIfNotFound: true);
        m_BoatControls_ShootRight = m_BoatControls.FindAction("ShootRight", throwIfNotFound: true);
        m_BoatControls_ShootLeft = m_BoatControls.FindAction("ShootLeft", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Boat Controls
    private readonly InputActionMap m_BoatControls;
    private List<IBoatControlsActions> m_BoatControlsActionsCallbackInterfaces = new List<IBoatControlsActions>();
    private readonly InputAction m_BoatControls_ForwardInput;
    private readonly InputAction m_BoatControls_TurnInput;
    private readonly InputAction m_BoatControls_CameraInput;
    private readonly InputAction m_BoatControls_ShootRight;
    private readonly InputAction m_BoatControls_ShootLeft;
    public struct BoatControlsActions
    {
        private @InputSystem m_Wrapper;
        public BoatControlsActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @ForwardInput => m_Wrapper.m_BoatControls_ForwardInput;
        public InputAction @TurnInput => m_Wrapper.m_BoatControls_TurnInput;
        public InputAction @CameraInput => m_Wrapper.m_BoatControls_CameraInput;
        public InputAction @ShootRight => m_Wrapper.m_BoatControls_ShootRight;
        public InputAction @ShootLeft => m_Wrapper.m_BoatControls_ShootLeft;
        public InputActionMap Get() { return m_Wrapper.m_BoatControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BoatControlsActions set) { return set.Get(); }
        public void AddCallbacks(IBoatControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_BoatControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BoatControlsActionsCallbackInterfaces.Add(instance);
            @ForwardInput.started += instance.OnForwardInput;
            @ForwardInput.performed += instance.OnForwardInput;
            @ForwardInput.canceled += instance.OnForwardInput;
            @TurnInput.started += instance.OnTurnInput;
            @TurnInput.performed += instance.OnTurnInput;
            @TurnInput.canceled += instance.OnTurnInput;
            @CameraInput.started += instance.OnCameraInput;
            @CameraInput.performed += instance.OnCameraInput;
            @CameraInput.canceled += instance.OnCameraInput;
            @ShootRight.started += instance.OnShootRight;
            @ShootRight.performed += instance.OnShootRight;
            @ShootRight.canceled += instance.OnShootRight;
            @ShootLeft.started += instance.OnShootLeft;
            @ShootLeft.performed += instance.OnShootLeft;
            @ShootLeft.canceled += instance.OnShootLeft;
        }

        private void UnregisterCallbacks(IBoatControlsActions instance)
        {
            @ForwardInput.started -= instance.OnForwardInput;
            @ForwardInput.performed -= instance.OnForwardInput;
            @ForwardInput.canceled -= instance.OnForwardInput;
            @TurnInput.started -= instance.OnTurnInput;
            @TurnInput.performed -= instance.OnTurnInput;
            @TurnInput.canceled -= instance.OnTurnInput;
            @CameraInput.started -= instance.OnCameraInput;
            @CameraInput.performed -= instance.OnCameraInput;
            @CameraInput.canceled -= instance.OnCameraInput;
            @ShootRight.started -= instance.OnShootRight;
            @ShootRight.performed -= instance.OnShootRight;
            @ShootRight.canceled -= instance.OnShootRight;
            @ShootLeft.started -= instance.OnShootLeft;
            @ShootLeft.performed -= instance.OnShootLeft;
            @ShootLeft.canceled -= instance.OnShootLeft;
        }

        public void RemoveCallbacks(IBoatControlsActions instance)
        {
            if (m_Wrapper.m_BoatControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBoatControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_BoatControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BoatControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BoatControlsActions @BoatControls => new BoatControlsActions(this);
    public interface IBoatControlsActions
    {
        void OnForwardInput(InputAction.CallbackContext context);
        void OnTurnInput(InputAction.CallbackContext context);
        void OnCameraInput(InputAction.CallbackContext context);
        void OnShootRight(InputAction.CallbackContext context);
        void OnShootLeft(InputAction.CallbackContext context);
    }
}
